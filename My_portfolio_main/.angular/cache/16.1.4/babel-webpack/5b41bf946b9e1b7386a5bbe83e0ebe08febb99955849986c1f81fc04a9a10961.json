{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate() {\n    if (this.isAuthenticated()) {\n      return true;\n    } else {\n      this.router.navigate(['/signin']);\n      return false;\n    }\n  }\n  isAuthenticated() {\n    // Add your authentication logic here\n    // For example, you can check if the user is logged in or has a valid session\n    // Return true if authenticated, false otherwise\n    // You can access the necessary information from local storage or session storage\n    const storedSignupData = localStorage.getItem('signupData');\n    return !!storedSignupData; // Return true if signupData is present, indicating the user is authenticated\n  }\n}\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthGuard","constructor","router","canActivate","isAuthenticated","navigate","storedSignupData","localStorage","getItem","i0","ɵɵinject","i1","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\USER\\Java-fsd\\My_portfolio_main\\src\\app\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private router: Router) {}\n\n  canActivate(): boolean {\n    if (this.isAuthenticated()) {\n      return true;\n    } else {\n      this.router.navigate(['/signin']);\n      return false;\n    }\n  }\n\n  isAuthenticated(): boolean {\n    // Add your authentication logic here\n    // For example, you can check if the user is logged in or has a valid session\n    // Return true if authenticated, false otherwise\n    // You can access the necessary information from local storage or session storage\n    const storedSignupData = localStorage.getItem('signupData');\n    return !!storedSignupData; // Return true if signupData is present, indicating the user is authenticated\n  }\n}\n"],"mappings":";;AAMA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAW;EAErCC,WAAWA,CAAA;IACT,IAAI,IAAI,CAACC,eAAe,EAAE,EAAE;MAC1B,OAAO,IAAI;KACZ,MAAM;MACL,IAAI,CAACF,MAAM,CAACG,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;MACjC,OAAO,KAAK;;EAEhB;EAEAD,eAAeA,CAAA;IACb;IACA;IACA;IACA;IACA,MAAME,gBAAgB,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAC3D,OAAO,CAAC,CAACF,gBAAgB,CAAC,CAAC;EAC7B;;;AAnBWN,SAAS,C;mBAATA,SAAS,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;AAAA;AAATZ,SAAS,C;SAATA,SAAS;EAAAa,OAAA,EAATb,SAAS,CAAAc,IAAA;EAAAC,UAAA,EAFR;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}